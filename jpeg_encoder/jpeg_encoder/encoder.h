#pragma once
#include<fstream>
#include<stdlib.h>
#define MCU_SIZE 16 
#define HuffmanTreeHeight 16
#define BLOCK_SIZE 8
#define PI 3.1415926535
#define EOB 0x00
using namespace std;
typedef unsigned char BYTE;
typedef unsigned int UINT;

struct unit //有几位，值是多少，这个结构在写入文件以及构建huffman表的时候都有用到
{
	UINT length = 0;
	int value = 0;
};

const BYTE ZigZag_Table[64] =
{
	0, 1, 5, 6,14,15,27,28,
	2, 4, 7,13,16,26,29,42,
	3, 8,12,17,25,30,41,43,
	9,11,18,24,31,40,44,53,
	10,19,23,32,39,45,52,54,
	20,22,33,38,46,51,55,60,
	21,34,37,47,50,56,59,61,
	35,36,48,49,57,58,62,63
};

const BYTE Chrominance_Quant_Table[64] =
{
	17,  18,  24,  47,  99,  99,  99,  99,
	18,  21,  26,  66,  99,  99,  99,  99,
	24,  26,  56,  99,  99,  99,  99,  99,
	47,  66,  99,  99,  99,  99,  99,  99,
	99,  99,  99,  99,  99,  99,  99,  99,
	99,  99,  99,  99,  99,  99,  99,  99,
	99,  99,  99,  99,  99,  99,  99,  99,
	99,  99,  99,  99,  99,  99,  99,  99
};

const BYTE Luminance_Quant_Table[64] =
{
	16,  11,  10,  16,  24,  40,  51,  61,
	12,  12,  14,  19,  26,  58,  60,  55,
	14,  13,  16,  24,  40,  57,  69,  56,
	14,  17,  22,  29,  51,  87,  80,  62,
	18,  22,  37,  56,  68, 109, 103,  77,
	24,  35,  55,  64,  81, 104, 113,  92,
	49,  64,  78,  87, 103, 121, 120, 101,
	72,  92,  95,  98, 112, 100, 103,  99
};

const BYTE LuminanceDC_HT_Length[HuffmanTreeHeight] = { 0, 0, 7, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0 };
const BYTE LuminanceDC_HT_Value[12] = { 4, 5, 3, 2, 6, 1, 0, 7, 8, 9, 10, 11 };

const BYTE LuminanceAC_HT_Length[HuffmanTreeHeight] = { 0, 2, 1, 3, 3, 2, 4, 3, 5, 5, 4, 4, 0, 0, 1, 0x7d };
const BYTE LuminanceAC_HT_Value[] =
{
	0x01, 0x02, 0x03, 0x00, 0x04, 0x11, 0x05, 0x12,
	0x21, 0x31, 0x41, 0x06, 0x13, 0x51, 0x61, 0x07,
	0x22, 0x71, 0x14, 0x32, 0x81, 0x91, 0xa1, 0x08,
	0x23, 0x42, 0xb1, 0xc1, 0x15, 0x52, 0xd1, 0xf0,
	0x24, 0x33, 0x62, 0x72, 0x82, 0x09, 0x0a, 0x16,
	0x17, 0x18, 0x19, 0x1a, 0x25, 0x26, 0x27, 0x28,
	0x29, 0x2a, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
	0x3a, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49,
	0x4a, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59,
	0x5a, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69,
	0x6a, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79,
	0x7a, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89,
	0x8a, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98,
	0x99, 0x9a, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7,
	0xa8, 0xa9, 0xaa, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6,
	0xb7, 0xb8, 0xb9, 0xba, 0xc2, 0xc3, 0xc4, 0xc5,
	0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xd2, 0xd3, 0xd4,
	0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xe1, 0xe2,
	0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea,
	0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8,
	0xf9, 0xfa
};

const BYTE ChrominanceDC_HT_Length[HuffmanTreeHeight] = { 0, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0 };
const BYTE ChrominanceDC_HT_Value[] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 };

const BYTE ChrominanceAC_HT_Length[HuffmanTreeHeight] = { 0, 2, 1, 2, 4, 4, 3, 4, 7, 5, 4, 4, 0, 1, 2, 0x77 };
const BYTE ChrominanceAC_HT_Value[] = {
	0x00, 0x01, 0x02, 0x03, 0x11, 0x04, 0x05, 0x21,
	0x31, 0x06, 0x12, 0x41, 0x51, 0x07, 0x61, 0x71,
	0x13, 0x22, 0x32, 0x81, 0x08, 0x14, 0x42, 0x91,
	0xa1, 0xb1, 0xc1, 0x09, 0x23, 0x33, 0x52, 0xf0,
	0x15, 0x62, 0x72, 0xd1, 0x0a, 0x16, 0x24, 0x34,
	0xe1, 0x25, 0xf1, 0x17, 0x18, 0x19, 0x1a, 0x26,
	0x27, 0x28, 0x29, 0x2a, 0x35, 0x36, 0x37, 0x38,
	0x39, 0x3a, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48,
	0x49, 0x4a, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58,
	0x59, 0x5a, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68,
	0x69, 0x6a, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78,
	0x79, 0x7a, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87,
	0x88, 0x89, 0x8a, 0x92, 0x93, 0x94, 0x95, 0x96,
	0x97, 0x98, 0x99, 0x9a, 0xa2, 0xa3, 0xa4, 0xa5,
	0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xb2, 0xb3, 0xb4,
	0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xc2, 0xc3,
	0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xd2,
	0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda,
	0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9,
	0xea, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8,
	0xf9, 0xfa };


//SOI
const short SOI_MARKER = short(0xD8FF);


//APP0
const short APPO_MARKER = short(0xE0FF);
const short APP0_SEGMENT_LENGTH = short(0x1000);
const short DENSITY = short(0x0100);

//DQT
const short DQT_MARKER = short(0xDBFF);
const short DQT_SEGMENT_LENGTH = short(0x8400);

//SOFO
const short SOFO_MARKER = short(0xC0FF);
const short SOFO_SEGMENT_LENGTH = short(0x1100);
//这里面还应该有段长度,在程序中动态获取和存入

//DHT
const short DHT_MARKER = short(0xC4FF);
const short DHT_LENGTH = short(0xA201);

//SOS
const short SOS_MARKER = short(0xDAFF);
const short SOS_LENGTH = short(0x0C00);

const short END_MARKER = short(0xD9FF);

bool GetCommand(const int argc, char* argv[]);

void HandleCommand(char* argv[]);

class encoder
{
private:
	UINT w = 0, h = 0;
	BYTE* pic = nullptr;
	char** Ymap = NULL;
	char** Crmap = NULL;
	char** Cbmap = NULL;
	char** Crmap_DownSamed = NULL;
	char** Cbmap_DownSamed = NULL;
	BYTE Luminance_QT[64] = { 0, };
	BYTE Chrominance_QT[64] = { 0, };
	unit Luminance_Dc_HT[12] = { {0,0}, };
	unit Luminance_Ac_HT[256] = { {0,0} };
	unit Chrominance_Dc_HT[12] = { {0,0}, };
	unit Chrominance_Ac_HT[256] = { {0,0}, };
	fstream outfile;
	void InitQuantTable();
	void RGB2YUV();
	void DownSampling();

	void DCT(const int x, const int y, short MCU_Y[4][64]);
	void DCT(const int base_x, const int base_y, short MCU_C[64], const bool tag); //标签用来判断是Cr还是Cb

	void Quantization(short MCU_Y[4][64]);
	void Quantization(short MCU_C[64]);

	void ZigZagReshape(const short MCU_Y[4][64], short ZigZagSequence[4][64]);
	void ZigZagReshape(const short MCU_C[64], short ZigZagSequence[64]);

	void RestoreMCU(short& pre_DC_Y, short& pre_Dc_Cr, short& pre_Dc_Cb, const short MCU_Y[4][64], const short MCU_Cr[64], const short MCU_Cb[64], BYTE& content, int& contentpos);

	void InitHuffmanTable(const BYTE* EstablishedLengthTable, const BYTE* EstablishedValueTable, unit* HT);

	unit SpecialStandardEncoding(const short& value);

	void RestoreBlock(short& pre_DC, const short MCU_[64], BYTE& content, int& contentpos, const bool tag);  //标签用来判断是Y还是C

	void MakeFile(const char* pic_name);

	void WriteHeader();

	short turnover(short n);
public:
	encoder(UINT width = 0, UINT height = 0);
	void Pipeline(const char* pic_name);
	~encoder();
};
